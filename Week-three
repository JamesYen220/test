# Week Three: Installing environment

Nice videos to watch: https://www.youtube.com/watch?v=WViYgkqtDAA&ab_channel=RISC-VInternational  

**QEMU and Linux Installation**  
Reference documents: https://notes.sjtu.edu.cn/5U14HamvRQioIG2spTyazw  
https://risc-v-getting-started-guide.readthedocs.io/en/latest/linux-qemu.html  
Tools needed    
```bash
sudo apt install autoconf automake autotools-dev curl libmpc-dev libmpfr-dev libgmp-dev \
                 gawk build-essential bison flex texinfo gperf libtool patchutils bc \
                 zlib1g-dev libexpat-dev git
```
```bash
git clone https://github.com/qemu/qemu
git clone https://github.com/torvalds/linux
git clone https://git.busybox.net/busybox
```
**Build QEMU with the RISC-V target**
```bash
cd qemu
git checkout v5.0.0
./configure --target-list=riscv64-softmmu
```
<img width="441" alt="image" src="https://github.com/JamesYen220/RiscV-SummerTraining/assets/100248639/d301fd91-17d6-4ae4-910f-4e473862c002">  

```bash
sudo apt update
sudo apt install libpixman-1-dev
```
Then run the command again `./configure --target-list=riscv64-softmmu`  
Sometimes we might meet the error  
<img width="537" alt="image" src="https://github.com/JamesYen220/RiscV-SummerTraining/assets/100248639/a2f0ba3d-21c5-4886-bfed-956477454ed7">  
Like the suggestion says, rerun the `./configure` command with `--disable-werror`  

```bash
./configure --target-list=riscv64-softmmu --disable-werror
make -j $(nproc)
sudo make install
```
Up to here this part is finished  
<img width="1714" alt="image" src="https://github.com/JamesYen220/RiscV-SummerTraining/assets/100248639/cd21dc99-1626-4f68-b1a9-e67bba166340">  

**Build Linux for the RISC-V target**
```bash
cd linux
make ARCH=riscv CROSS_COMPILE=riscv64-unknown-linux-gnu- defconfig
make ARCH=riscv CROSS_COMPILE=riscv64-unknown-linux-gnu- -j $(nproc)
```
The `make ARCH=riscv CROSS_COMPILE=riscv64-unknown-linux-gnu- -j $(nproc)` might take a while  
Up to here this part is finished  


**Build Busybox**
```bash
make ARCH=riscv CROSS_COMPILE=riscv64-unknown-linux-gnu- defconfig
make ARCH=riscv CROSS_COMPILE=riscv64-unknown-linux-gnu- menuconfig
make ARCH=riscv CROSS_COMPILE=riscv64-unknown-linux-gnu- install
```
When executing `make ARCH=riscv CROSS_COMPILE=riscv64-unknown-linux-gnu- menuconfig` go to `Setting` then under `Build Options` select `<*> Build static binary (no shared libs)`
<img width="919" alt="image" src="https://github.com/JamesYen220/RiscV-SummerTraining/assets/100248639/0140b083-4907-4eb8-a5b0-e11d8fc8221d">  
<img width="917" alt="image" src="https://github.com/JamesYen220/RiscV-SummerTraining/assets/100248639/09c462c5-ba4e-421c-b90e-5a44029329cf">  

Up to here this part is finished  
<img width="413" alt="image" src="https://github.com/JamesYen220/RiscV-SummerTraining/assets/100248639/807a7ddd-6253-4614-be27-73650e032e8b">  
Run commands as suggested  
```bash
sudo chown root:root /home/james/busybox/busybox
sudo chmod 4755 /home/james/busybox/busybox
```

**Starting RISC-V Linux**
```bash
cd linux/
mkdir rootfs
cd rootfs
dd if=/dev/zero of=rootfs.img bs=1M count=50
mkfs.ext2 -L riscv-rootfs rootfs.img
sudo mkdir /mnt/rootfs
sudo mount rootfs.img /mnt/rootfs
```
```bash
cd busybox/
sudo cp -ar _install/* /mnt/rootfs
sudo mkdir /mnt/rootfs/{dev,home,mnt,proc,sys,tmp,var}
```
```bash
cd linux/
qemu-system-riscv64 -nographic -machine virt \
-kernel /home/james/linux/arch/riscv/boot/Image \
-append "root=/dev/vda rw console=ttyS0" \
-drive file=rootfs/rootfs.img,format=raw,id=hd0 \
-device virtio-blk-device,drive=hd0 \
-bios default
```
After pressing  `enter` we are met with the error:
<img width="904" alt="image" src="https://github.com/JamesYen220/RiscV-SummerTraining/assets/100248639/0af90115-d02a-447e-9cd8-1f5147822a90">  
References: https://blog.csdn.net/yueni_zhao/article/details/109484004?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168853891216800222890416%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=168853891216800222890416&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-109484004-null-null.142^v88^control_2,239^v2^insert_chatgpt&utm_term=cant%20run%20%2Fetc%2Finit.d%2FrcS%3A%20No%20such%20file%20or%20directory%20%20cant%20open%20%2Fdev%2Ftty4%3A%20Permission%20deniedsole.%20%20cant%20open%20%2Fdev%2Ftty3%3A%20Permission%20denied%20cant%20open%20%2Fdev%2Ftty2%3A%20Permission%20denied%20cant%20open%20%2Fdev%2Ftt&spm=1018.2226.3001.4187  

https://blog.csdn.net/m0_46170433/article/details/105510908?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168853891216800222890416%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=168853891216800222890416&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-5-105510908-null-null.142^v88^control_2,239^v2^insert_chatgpt&utm_term=cant%20run%20%2Fetc%2Finit.d%2FrcS%3A%20No%20such%20file%20or%20directory%20%20cant%20open%20%2Fdev%2Ftty4%3A%20Permission%20deniedsole.%20%20cant%20open%20%2Fdev%2Ftty3%3A%20Permission%20denied%20cant%20open%20%2Fdev%2Ftty2%3A%20Permission%20denied%20cant%20open%20%2Fdev%2Ftt&spm=1018.2226.3001.4187

```bash
cd linux/rootfs/
mkdir dir etc/init.d -p
touch /etc/init.d/rcS
vi etc/init.d/rcS
```
Add the following to the file  
```
#!/bin/sh 
/bin/mount -a
echo /sbin/mdev > /proc/sys/kernel/hotplug 
/sbin/mdev -s  
```
And then  
```bash
chmod 777 etc/init.d/rcS
```
Next, create the `fstab` and `inittab` file  
```
touch etc/fstab
touch etc/inittab
mkdir proc sys var tmp dev -p
```
In the `inittab` file, add  
```
#first:run the system script file
::sysinit:/etc/init.d/rcS
::askfirst:-/bin/sh
::ctrlaltdel:-/sbin/reboot
#umount all filesystem
::shutdown:/bin/umount -a -r
#restart init process
::restart:/sbin/init
```
In the `fstab` file, add  
```
# /etc/fstab: static file system information.
#
# Use 'vol_id --uuid' to print the universally unique identifier for a
# device; this may be used with UUID= as a more robust way to name devices
# that works even if disks are added and removed. See fstab(5).
#
# 	<file system> 	<mount point> 	<type> 	<options> 	<dump> 	<pass>
	proc 			/proc 			proc 	defaults 	0 		0
	sysfs 			/sys 			sysfs 	defaults 	0 		0
	tmpfs 			/var 			tmpfs 	defaults 	0 		0
	tmpfs 			/tmp 			tmpfs 	defaults 	0 		0
	tmpfs 			/dev 			tmpfs 	defaults 	0 		0
```
In the busybox direction, give root permissions  
Reference: https://www.cnblogs.com/Rainingday/p/12483773.html   
```
chmod a-s busybox
sudo chown root * -R
```

Up to here, the installation should be complete  
<img width="905" alt="image" src="https://github.com/JamesYen220/RiscV-SummerTraining/assets/100248639/b6fb7c53-cbaf-41ad-89d9-73f0beb6f0ef">  
If you want to exit qemu, press `control+x` release and then press `x`  

**Run Game on Risc-V board using Box64**  
Enviornment set up already by 学长, including ssh, box64, and vpn settings  
![2751688629366_ pic](https://github.com/JamesYen220/RiscV-SummerTraining/assets/100248639/1c395abd-e634-47e0-92d2-f7a4221d1533)  
Connect to computer directly using  
```bash
ssh debian@10.0.0.184
```
Both username and password is debian  


